apply plugin: 'java'                              
apply plugin: 'war'                               
apply plugin: 'com.google.cloud.tools.appengine'  
apply plugin: 'eclipse'

def appengineVersion = "1.9.83"

buildscript {  

  repositories {
     	mavenCentral()
        mavenLocal()
        jcenter()
        google()
 }
  dependencies {
     classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'
  }
}

repositories {   
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
  }
  mavenCentral()
  jcenter()
}
dependencies {
  compile "com.google.appengine:appengine-api-1.0-sdk:${appengineVersion}"
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
  compile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.5.RELEASE'
  implementation 'jstl:jstl:1.2'

  testImplementation 'junit:junit:4.12'
  testImplementation 'com.google.truth:truth:0.33'
  testImplementation 'org.mockito:mockito-all:1.10.19'

  testImplementation 'com.google.appengine:appengine-testing:+'
  testImplementation 'com.google.appengine:appengine-api-stubs:+'
  testImplementation 'com.google.appengine:appengine-tools-sdk:+'
}
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  
  deploy {   
    project = "fullhistoryinternsproject"
    version = '5'
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}

group   = "com.example.appenginej8"        // Generated output GroupId
version = "1.0-SNAPSHOT"       // Version in generated output

sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8